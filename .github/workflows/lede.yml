name: lede
on:
  push:
    branches: 
      - master
    paths:
      - '.github/workflows/lede.yml'
    
  schedule:
    - cron: '0 18 */5 * *'

env:
  SSH_ACTIONS: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
    #if: github.repository == 'uosX/openwrt'
    
    steps:  
      - name: Checkout
        uses: actions/checkout@master
        with:
          ref: master

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |          
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo apt-get update
          sudo apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3.5 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget
          sudo apt-get -y autoremove --purge
          sudo apt-get clean
                     
      - name: clone git
        run: |          
          git clone https://github.com/coolsnowwolf/lede          
                    
      - name: Setup Debug Session
        uses: P3TERX/debugger-action@master
        
      - name: change Update install feeds
        run: |
          cd lede
                        
          ./scripts/feeds update -a          
          ./scripts/feeds install -a
  
      - name: Setup Debug Session
        uses: P3TERX/debugger-action@master
        
      - name: Generate configuration file
        run: |          
          #uses: P3TERX/debugger-action@master
          #if: env.SSH_ACTIONS == 'true'
  
      - name: Make download
        run: |          
          make -j8 download V=99
      - name: Setup Debug Session
        uses: P3TERX/debugger-action@master
        
        
      - name: Compile firmware
        run: |
          make V=99
          
      - name: Prepare artifact
        run: |
          rm -rf ./artifact/
          mkdir ./artifact/          
          pwd
                    
          cp .config ./artifact/
          
          ls /bin/targets/
          ls bin/targets/x86/64
          
          
          
      #- name: Zip Files
      #  run: |
      #    find bin/targets/ -name "openwrt_*img*" | xargs -i zip -r {}.zip {}
          
      #- name: Assemble Artifact
      #  run: |
      #    rm -rf ./artifact/
      #    mkdir -p ./artifact/
      #    find bin/targets/ -name "openwrt_*img.zip*" | xargs -i mv -f {} ./artifact/
          
      - name: Upload Artifact
        uses: actions/upload-artifact@master
        with:
          name: openwrt
          path: ./artifact/
